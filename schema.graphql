type GraphNetwork @entity {
  "ID is set to 1"
  id: ID!

  # Staking global aggregate values
  "The total amount of GRT staked in the staking contract"
  totalTokensStaked: BigInt
  "Total delegated tokens in the protocol. totalDelegatedTokens in the original subgraph"
  totalTokensDelegated: BigInt
  # Curation global aggregate values
  "The total amount of GRT signalled in the Curation contract"
  totalTokensSignalled: BigInt
  "NOT IMPLEMENTED - Total GRT currently curating via the Auto-Migrate function"
  totalTokensSignalledAutoMigrate: BigDecimal
  "NOT IMPLEMENTED - Total GRT currently curating to a specific version"
  totalTokensSignalledDirectly: BigDecimal

  # Graph Token global variables
  "Graph Token supply"
  totalSupply: BigInt

  # Graph Token mint burn totals
  "Total amount of GRT minted"
  totalGRTMinted: BigInt
  "Total amount of GRT burned"
  totalGRTBurned: BigInt
}

type GraphAccount @entity {
  "Graph account ID"
  id: ID!

  # GRT info
  "Graph token balance"
  balance: BigInt

  # Staking and Curating and Delegating
  "Indexer fields for this GraphAccount. Null if never indexed"
  indexer: Indexer
  "Delegator fields for this GraphAccount. Null if never delegated"
  delegator: Delegator
  "Curator fields for this GraphAccount. Null if never delegated"
  curator: Curator
}

type Indexer @entity {
  "Eth address of Indexer"
  id: ID!
  "Graph account of this indexer"
  account: GraphAccount

  # Staking data
  "CURRENT tokens staked in the protocol. Decreases on withdraw rather than on lock"
  stakedTokens: BigInt

  # Delegation Pool
  "Delegators to this Indexer"
  delegators: [DelegatedStake!]! @derivedFrom(field: "indexer")
  "CURRENT tokens delegated to the indexer"
  delegatedTokens: BigInt
}

type Delegator @entity {
  "Delegator address"
  id: ID!
  "Graph account of the delegator"
  account: GraphAccount
  "Stakes of this delegator"
  stakes: [DelegatedStake!]! @derivedFrom(field: "delegator")
  "CUMULATIVE staked tokens in DelegatorStakes of this Delegator"
  totalStakedTokens: BigInt
}

type DelegatedStake @entity {
  "Concatenation of Delegator address and Indexer address"
  id: ID!
  "Index the stake is delegated to"
  indexer: Indexer
  "Delegator"
  delegator: Delegator
  "CUMULATIVE tokens delegated"
  stakedTokens: BigInt
}

type Curator @entity {
  "Curator address"
  id: ID!
  "Graph account of the curator"
  account: GraphAccount
  "CUMULATIVE tokens signalled on all the subgraphs"
  totalSignalledTokens: BigInt
  "CUMULATIVE tokens unsignalled on all the subgraphs"
  totalUnsignalledTokens: BigInt

  "CUMULATIVE tokens signalled on all names"
  totalNameSignalledTokens: BigInt
  "CUMULATIVE tokens unsignalled on all names"
  totalNameUnsignalledTokens: BigInt
}

type SubgrapDeployment @entity {
  "Subgraph Deployment ID. The IPFS hash with Qm removed to fit into 32 bytes"
  id: ID!
  "CURRENT total stake of all indexers on this Subgraph Deployment"
  stakedTokens: BigInt!
  "CURRENT signalled tokens in the bonding curve"
  signalledTokens: BigInt!
  "CURRENT curation signal for this subgraph deployment"
  signalAmount: BigInt!
  "Total rewards accrued all time by this Subgraph Deployment. Includes delegator and indexer rewards"
  indexingRewardAmount: BigInt!
  "Total rewards accrued all time by indexers"
  indexingIndexerRewardAmount: BigInt!
  "Total rewards accrued all time by delegators"
  indexingDelegatorRewardAmount: BigInt!  
  "Total query fees earned by this Subgraph Deployment, without curator query fees"
  queryFeesAmount: BigInt!
  "Total query fee rebates earned from the protocol, through the cobbs douglas formula. Does not include delegation fees"
  queryFeeRebates: BigInt!
  "Total curator rewards from fees"
  curatorFeeRewards: BigInt!
}

type Allocation @entity {
  "Channel Address"
  id: ID!
  "Indexer of this allocation"
  indexer: Indexer!
  "Creator of the allocation - can be the operator or the indexer"
  creator: Bytes!
  "If the Allocation is active it shows the indexer. If closed, it is null"
  activeForIndexer: Indexer
  "Subgraph deployment that is being allocated to"
  subgraphDeployment: SubgraphDeployment!
  "Tokens allocation in this allocation"
  allocatedTokens: BigInt!
  "Effective allocation that is realized upon closing"
  effectiveAllocation: BigInt!
  "Fees this allocation collected from query fees upon closing. Excludes curator reward and protocol tax"
  queryFeesCollected: BigInt!
  "Query fee rebate amount claimed from the protocol through cobbs douglas. Does not include portion given to delegators"
  queryFeeRebates: BigInt!
  "Curator rewards deposited to the curating bonding curve"
  curatorRewards: BigInt!
  "Indexing rewards earned by this allocation. Includes delegator and indexer rewards"
  indexingRewards: BigInt!
  "Indexing rewards earned by this allocation by indexers"
  indexingIndexerRewards: BigInt!
  "Indexing rewards earned by this allocation by delegators"
  indexingDelegatorRewards: BigInt!
}